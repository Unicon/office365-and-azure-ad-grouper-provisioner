import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'idea'

sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations {
    provided
    compile.extendsFrom provided
}

sourceSets {
    main {
        compileClasspath += [configurations.provided]
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.squareup.retrofit2:retrofit:2.0.2'
    compile 'com.squareup.retrofit2:converter-moshi:2.0.2'
    compile 'com.squareup.okhttp3:logging-interceptor:3.2.0'

    compile 'com.microsoft.alm:oauth2-useragent:0.8.1'

    provided ('edu.internet2.middleware.grouper:grouper:2.3.0') {
        transitive = false
    }
    provided 'edu.internet2.middleware.grouper:subject:2.3.0'
    provided 'org.slf4j:slf4j-api:1.6.2'
    
    //Needed for hooks to compile
    provided 'org.hibernate:hibernate-core:3.6.0.Final'
}

distributions {    
    main {
        baseName = 'office-365-azure-ad-grouper-provisioner'
        contents {
            from jar
            from { 'LICENSE' }
            from {project.configurations.compile - project.configurations.provided}
        }
    }
}

test.useTestNG()
jar.dependsOn test

task copyDocker(type: Copy) {
    from 'src/test/test-compose/'
    into 'build/docker-compose/'
    filter(ReplaceTokens, tokens: [
            'o365.clientId': project.'o365.clientId',
            'o365.clientSecret': project.'o365.clientSecret',
            'o365.tenantId': project.'o365.tenantId'
    ])
}

task addLib(type: Copy) {
    from jar
    from (project.configurations.compile - project.configurations.provided)
    into 'build/docker-compose/daemon/lib/'
}

task buildContainers(type:Exec) {
    dependsOn copyDocker, addLib

    doFirst {
        logger.lifecycle("Building the initial images may take a long time. Have plenty of bandwidth.")
    }

    workingDir 'build/docker-compose'
    commandLine 'docker-compose', 'build'
}

task runContainers(type:Exec) {
  dependsOn buildContainers

  workingDir 'build/docker-compose'
  commandLine 'docker-compose', 'up', '-d'
}

task stopContainers(type:Exec) {
    workingDir 'build/docker-compose'
    commandLine 'docker-compose', 'kill'
}

task removeContainers(type:Exec) {
    dependsOn stopContainers

    workingDir 'build/docker-compose'
    commandLine 'docker-compose', 'rm', '-f'
}

task logs(type:Exec) {
    workingDir 'build/docker-compose'
    commandLine 'docker-compose', 'logs'
}

task autoIntTest(type: Test) {
    dependsOn runContainers

    outputs.upToDateWhen {false}
    include '**/*IntegrationTest*'
    finalizedBy removeContainers

    doFirst {
        logger.lifecycle("The test will take a few moments to start while we wait for Jetty/Tomcat to start up.")
    }
}

task intTest(type: Test) {
    dependsOn testClasses

    outputs.upToDateWhen {false}
    include '**/*IntegrationTest*'

    doFirst {
        logger.lifecycle("The test will take a few moments to start while we wait for Jetty/Tomcat to start up.")
    }
}

clean {
    dependsOn removeContainers
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}